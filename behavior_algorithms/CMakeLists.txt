cmake_minimum_required(VERSION 2.8.3)
project(behavior_algorithms)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  std_msgs
  message_generation
)
find_package(Eigen3 REQUIRED)
include_directories(${EIGEN3_INCLUDE_DIR})
add_definitions(${EIGEN_DEFINITIONS})

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
 add_service_files(
   FILES
   status_service.srv
#   Service2.srv
 )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
   std_msgs  # Or other packages containing msgs
 )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
 INCLUDE_DIRS include
 LIBRARIES behavior_algorithms
 CATKIN_DEPENDS roscpp message_runtime std_msgs
 DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
include
  ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/behavior_algorithms.cpp
# )

# Add cmake target dependencies of the library
# as an example, code may need to be generated before libraries
# either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/behavior_algorithms_node.cpp)
add_executable(peg_hole_linear_search src/peg_hole_linear_search.cpp)
add_executable(peg_hole_spiral_search src/peg_hole_spiral_search.cpp)
add_executable(cap_off src/cap_off.cpp)
add_executable(cap_on src/cap_on.cpp)
add_executable(quat_to_euler_ang_converter src/quat_to_euler_ang_converter.cpp)
add_executable(simple_move_until_touch src/simple_move_until_touch.cpp)
add_executable(position_targeting_effort_limiting_x src/position_targeting_effort_limiting_x.cpp)
add_executable(position_targeting_effort_limiting_y src/position_targeting_effort_limiting_y.cpp)
add_executable(position_targeting_effort_limiting_z src/position_targeting_effort_limiting_z.cpp)
add_executable(orientation_targeting_with_torque_limiting src/orientation_targeting_with_torque_limiting.cpp)
add_executable(orientation_targeting_effort_limiting_x src/orientation_targeting_effort_limiting_x.cpp)
add_executable(orientation_targeting_effort_limiting_y src/orientation_targeting_effort_limiting_y.cpp)
add_executable(orientation_targeting_effort_limiting_z src/orientation_targeting_effort_limiting_z.cpp)
add_executable(compliant_cutting src/compliant_cutting.cpp)
add_executable(force_moment_accommodation src/force_moment_accommodation.cpp)
add_executable(translational_wiggle_push src/translational_wiggle_push.cpp)
add_executable(torsional_wiggle_push src/torsional_wiggle_push.cpp)
add_executable(translational_wiggle_pull src/translational_wiggle_pull.cpp)
add_executable(torsional_wiggle_pull src/torsional_wiggle_pull.cpp)

add_executable(freeze_position_targeting_effort_limiting_z src/freeze_position_targeting_effort_limiting_z.cpp)
add_executable(force_moment_accommodation_interaction_port src/force_moment_accommodation_interaction_port.cpp)
add_executable(ptwl_cartp2p src/ptwl_cartp2p.cpp)
add_executable(cartp2ptwl src/cartp2ptwl.cpp)
add_executable(restore_wrench_eq src/restore_wrench_eq.cpp)
add_executable(current_translational_wiggle_push src/current_translational_wiggle_push.cpp)
add_executable(current_torsional_wiggle_push src/current_torsional_wiggle_push.cpp)
add_executable(current_translational_wiggle_pull src/current_translational_wiggle_pull.cpp)
add_executable(current_torsional_wiggle_pull src/current_torsional_wiggle_pull.cpp)
add_executable(data_collect src/data_collect.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(torsional_wiggle_push ${catkin_EXPORTED_TARGETS})
add_dependencies(torsional_wiggle_pull ${catkin_EXPORTED_TARGETS})
add_dependencies(translational_wiggle_push ${catkin_EXPORTED_TARGETS})
add_dependencies(translational_wiggle_pull ${catkin_EXPORTED_TARGETS})
add_dependencies(current_torsional_wiggle_push ${catkin_EXPORTED_TARGETS})
add_dependencies(current_torsional_wiggle_pull ${catkin_EXPORTED_TARGETS})
add_dependencies(current_translational_wiggle_push ${catkin_EXPORTED_TARGETS})
add_dependencies(current_translational_wiggle_pull ${catkin_EXPORTED_TARGETS})
add_dependencies(ptwl_cartp2p ${catkin_EXPORTED_TARGETS})
add_dependencies(freeze_position_targeting_effort_limiting_z ${catkin_EXPORTED_TARGETS})
add_dependencies(cartp2ptwl ${catkin_EXPORTED_TARGETS})
add_dependencies(orientation_targeting_effort_limiting_x ${catkin_EXPORTED_TARGETS})
add_dependencies(orientation_targeting_effort_limiting_y ${catkin_EXPORTED_TARGETS})
add_dependencies(orientation_targeting_effort_limiting_z ${catkin_EXPORTED_TARGETS})
add_dependencies(position_targeting_effort_limiting_x ${catkin_EXPORTED_TARGETS})
add_dependencies(position_targeting_effort_limiting_y ${catkin_EXPORTED_TARGETS})
add_dependencies(position_targeting_effort_limiting_z ${catkin_EXPORTED_TARGETS})
add_dependencies(compliant_cutting ${catkin_EXPORTED_TARGETS})
add_dependencies(restore_wrench_eq ${catkin_EXPORTED_TARGETS})
add_dependencies(force_moment_accommodation ${catkin_EXPORTED_TARGETS})
add_dependencies(force_moment_accommodation_interaction_port ${catkin_EXPORTED_TARGETS})
add_dependencies(data_collect ${catkin_EXPORTED_TARGETS})


## Specify libraries to link a library or executable target against
 target_link_libraries(peg_hole_linear_search
   ${catkin_LIBRARIES}
 )

target_link_libraries(peg_hole_spiral_search
   ${catkin_LIBRARIES}
 )

target_link_libraries(cap_off
   ${catkin_LIBRARIES}
 )

target_link_libraries(cap_on
   ${catkin_LIBRARIES}
 )
target_link_libraries(quat_to_euler_ang_converter
   ${catkin_LIBRARIES}
 )
 target_link_libraries(simple_move_until_touch
   ${catkin_LIBRARIES}
 )
   target_link_libraries(position_targeting_effort_limiting_x
   ${catkin_LIBRARIES}
 )
   target_link_libraries(position_targeting_effort_limiting_y
   ${catkin_LIBRARIES}
 )
   target_link_libraries(position_targeting_effort_limiting_z
   ${catkin_LIBRARIES}
 )
   target_link_libraries(orientation_targeting_with_torque_limiting
   ${catkin_LIBRARIES}
 )
   target_link_libraries(orientation_targeting_effort_limiting_x
   ${catkin_LIBRARIES}
 )
   target_link_libraries(orientation_targeting_effort_limiting_y
   ${catkin_LIBRARIES}
 )
   target_link_libraries(orientation_targeting_effort_limiting_z
   ${catkin_LIBRARIES}
 )
    target_link_libraries(compliant_cutting
   ${catkin_LIBRARIES}
 )
    target_link_libraries(force_moment_accommodation
   ${catkin_LIBRARIES}
 )
    target_link_libraries(force_moment_accommodation_interaction_port
   ${catkin_LIBRARIES}
 )
     target_link_libraries(translational_wiggle_push
   ${catkin_LIBRARIES}
 )
     target_link_libraries(torsional_wiggle_push
   ${catkin_LIBRARIES}
 )
     target_link_libraries(translational_wiggle_pull
   ${catkin_LIBRARIES}
 )
     target_link_libraries(torsional_wiggle_pull
   ${catkin_LIBRARIES}
 )
     target_link_libraries(current_translational_wiggle_push
   ${catkin_LIBRARIES}
 )
     target_link_libraries(current_torsional_wiggle_push
   ${catkin_LIBRARIES}
 )
     target_link_libraries(current_translational_wiggle_pull
   ${catkin_LIBRARIES}
 )
     target_link_libraries(current_torsional_wiggle_pull
   ${catkin_LIBRARIES}
 )
     target_link_libraries(freeze_position_targeting_effort_limiting_z
   ${catkin_LIBRARIES}
 )
  target_link_libraries(ptwl_cartp2p
  ${catkin_LIBRARIES}
 )
  target_link_libraries(cartp2ptwl
  ${catkin_LIBRARIES}
 )
  target_link_libraries(restore_wrench_eq
  ${catkin_LIBRARIES}
 )
  target_link_libraries(data_collect
  ${catkin_LIBRARIES}
 )
#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_behavior_algorithms.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
