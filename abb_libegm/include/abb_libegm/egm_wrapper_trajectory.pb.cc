// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: egm_wrapper_trajectory.proto

#include "egm_wrapper_trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Cartesian_egm_5fwrapper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Joints_egm_5fwrapper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CartesianVelocity_egm_5fwrapper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Output_egm_5fwrapper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CartesianPose_egm_5fwrapper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Input_egm_5fwrapper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_5ftrajectory_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ExternalGoal_egm_5fwrapper_5ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_5ftrajectory_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_JointGoal_egm_5fwrapper_5ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_5ftrajectory_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrajectoryGoal_egm_5fwrapper_5ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_5ftrajectory_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CartesianGoal_egm_5fwrapper_5ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_5ftrajectory_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PointGoal_egm_5fwrapper_5ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_5ftrajectory_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RobotGoal_egm_5fwrapper_5ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_5ftrajectory_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RobotPositionGoal_egm_5fwrapper_5ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_5ftrajectory_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RobotVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto;
namespace abb {
namespace egm {
namespace wrapper {
namespace trajectory {
class JointGoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointGoal> _instance;
} _JointGoal_default_instance_;
class CartesianGoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CartesianGoal> _instance;
} _CartesianGoal_default_instance_;
class RobotGoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotGoal> _instance;
} _RobotGoal_default_instance_;
class ExternalGoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExternalGoal> _instance;
} _ExternalGoal_default_instance_;
class PointGoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointGoal> _instance;
} _PointGoal_default_instance_;
class RobotPositionGoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotPositionGoal> _instance;
} _RobotPositionGoal_default_instance_;
class RobotVelocityGoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotVelocityGoal> _instance;
} _RobotVelocityGoal_default_instance_;
class TrajectoryGoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryGoal> _instance;
} _TrajectoryGoal_default_instance_;
class StaticPositionGoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticPositionGoal> _instance;
} _StaticPositionGoal_default_instance_;
class StaticVelocityGoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticVelocityGoal> _instance;
} _StaticVelocityGoal_default_instance_;
class ExecutionProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionProgress> _instance;
} _ExecutionProgress_default_instance_;
}  // namespace trajectory
}  // namespace wrapper
}  // namespace egm
}  // namespace abb
static void InitDefaultsJointGoal_egm_5fwrapper_5ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::egm::wrapper::trajectory::_JointGoal_default_instance_;
    new (ptr) ::abb::egm::wrapper::trajectory::JointGoal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::egm::wrapper::trajectory::JointGoal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JointGoal_egm_5fwrapper_5ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJointGoal_egm_5fwrapper_5ftrajectory_2eproto}, {
      &scc_info_Joints_egm_5fwrapper_2eproto.base,}};

static void InitDefaultsCartesianGoal_egm_5fwrapper_5ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::egm::wrapper::trajectory::_CartesianGoal_default_instance_;
    new (ptr) ::abb::egm::wrapper::trajectory::CartesianGoal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::egm::wrapper::trajectory::CartesianGoal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CartesianGoal_egm_5fwrapper_5ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCartesianGoal_egm_5fwrapper_5ftrajectory_2eproto}, {
      &scc_info_CartesianPose_egm_5fwrapper_2eproto.base,
      &scc_info_Cartesian_egm_5fwrapper_2eproto.base,}};

static void InitDefaultsRobotGoal_egm_5fwrapper_5ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::egm::wrapper::trajectory::_RobotGoal_default_instance_;
    new (ptr) ::abb::egm::wrapper::trajectory::RobotGoal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::egm::wrapper::trajectory::RobotGoal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RobotGoal_egm_5fwrapper_5ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRobotGoal_egm_5fwrapper_5ftrajectory_2eproto}, {
      &scc_info_JointGoal_egm_5fwrapper_5ftrajectory_2eproto.base,
      &scc_info_CartesianGoal_egm_5fwrapper_5ftrajectory_2eproto.base,}};

static void InitDefaultsExternalGoal_egm_5fwrapper_5ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::egm::wrapper::trajectory::_ExternalGoal_default_instance_;
    new (ptr) ::abb::egm::wrapper::trajectory::ExternalGoal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::egm::wrapper::trajectory::ExternalGoal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExternalGoal_egm_5fwrapper_5ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExternalGoal_egm_5fwrapper_5ftrajectory_2eproto}, {
      &scc_info_JointGoal_egm_5fwrapper_5ftrajectory_2eproto.base,}};

static void InitDefaultsPointGoal_egm_5fwrapper_5ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::egm::wrapper::trajectory::_PointGoal_default_instance_;
    new (ptr) ::abb::egm::wrapper::trajectory::PointGoal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::egm::wrapper::trajectory::PointGoal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PointGoal_egm_5fwrapper_5ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPointGoal_egm_5fwrapper_5ftrajectory_2eproto}, {
      &scc_info_RobotGoal_egm_5fwrapper_5ftrajectory_2eproto.base,
      &scc_info_ExternalGoal_egm_5fwrapper_5ftrajectory_2eproto.base,}};

static void InitDefaultsRobotPositionGoal_egm_5fwrapper_5ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::egm::wrapper::trajectory::_RobotPositionGoal_default_instance_;
    new (ptr) ::abb::egm::wrapper::trajectory::RobotPositionGoal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::egm::wrapper::trajectory::RobotPositionGoal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RobotPositionGoal_egm_5fwrapper_5ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRobotPositionGoal_egm_5fwrapper_5ftrajectory_2eproto}, {
      &scc_info_Joints_egm_5fwrapper_2eproto.base,
      &scc_info_CartesianPose_egm_5fwrapper_2eproto.base,}};

static void InitDefaultsRobotVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::egm::wrapper::trajectory::_RobotVelocityGoal_default_instance_;
    new (ptr) ::abb::egm::wrapper::trajectory::RobotVelocityGoal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::egm::wrapper::trajectory::RobotVelocityGoal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RobotVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRobotVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto}, {
      &scc_info_Joints_egm_5fwrapper_2eproto.base,
      &scc_info_CartesianVelocity_egm_5fwrapper_2eproto.base,}};

static void InitDefaultsTrajectoryGoal_egm_5fwrapper_5ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::egm::wrapper::trajectory::_TrajectoryGoal_default_instance_;
    new (ptr) ::abb::egm::wrapper::trajectory::TrajectoryGoal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::egm::wrapper::trajectory::TrajectoryGoal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrajectoryGoal_egm_5fwrapper_5ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrajectoryGoal_egm_5fwrapper_5ftrajectory_2eproto}, {
      &scc_info_PointGoal_egm_5fwrapper_5ftrajectory_2eproto.base,}};

static void InitDefaultsStaticPositionGoal_egm_5fwrapper_5ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::egm::wrapper::trajectory::_StaticPositionGoal_default_instance_;
    new (ptr) ::abb::egm::wrapper::trajectory::StaticPositionGoal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::egm::wrapper::trajectory::StaticPositionGoal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StaticPositionGoal_egm_5fwrapper_5ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStaticPositionGoal_egm_5fwrapper_5ftrajectory_2eproto}, {
      &scc_info_RobotPositionGoal_egm_5fwrapper_5ftrajectory_2eproto.base,
      &scc_info_Joints_egm_5fwrapper_2eproto.base,}};

static void InitDefaultsStaticVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::egm::wrapper::trajectory::_StaticVelocityGoal_default_instance_;
    new (ptr) ::abb::egm::wrapper::trajectory::StaticVelocityGoal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::egm::wrapper::trajectory::StaticVelocityGoal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StaticVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStaticVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto}, {
      &scc_info_RobotVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto.base,
      &scc_info_Joints_egm_5fwrapper_2eproto.base,}};

static void InitDefaultsExecutionProgress_egm_5fwrapper_5ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::egm::wrapper::trajectory::_ExecutionProgress_default_instance_;
    new (ptr) ::abb::egm::wrapper::trajectory::ExecutionProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::egm::wrapper::trajectory::ExecutionProgress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ExecutionProgress_egm_5fwrapper_5ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsExecutionProgress_egm_5fwrapper_5ftrajectory_2eproto}, {
      &scc_info_Input_egm_5fwrapper_2eproto.base,
      &scc_info_Output_egm_5fwrapper_2eproto.base,
      &scc_info_PointGoal_egm_5fwrapper_5ftrajectory_2eproto.base,
      &scc_info_TrajectoryGoal_egm_5fwrapper_5ftrajectory_2eproto.base,}};

void InitDefaults_egm_5fwrapper_5ftrajectory_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_JointGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CartesianGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExternalGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PointGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotPositionGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StaticPositionGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StaticVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionProgress_egm_5fwrapper_5ftrajectory_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[11];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_egm_5fwrapper_5ftrajectory_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_egm_5fwrapper_5ftrajectory_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_egm_5fwrapper_5ftrajectory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, position_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, velocity_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, acceleration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, pose_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, velocity_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, acceleration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotGoal, joints_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotGoal, cartesian_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExternalGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExternalGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExternalGoal, joints_),
  0,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, duration_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, robot_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, external_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, reach_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotPositionGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotPositionGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotPositionGoal, joints_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotPositionGoal, cartesian_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotVelocityGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotVelocityGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotVelocityGoal, joints_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotVelocityGoal, cartesian_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::TrajectoryGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::TrajectoryGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::TrajectoryGoal, points_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticPositionGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticPositionGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticPositionGoal, robot_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticPositionGoal, external_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticVelocityGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticVelocityGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticVelocityGoal, robot_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticVelocityGoal, external_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, inputs_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, outputs_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, time_passed_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, goal_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, active_trajectory_),
  PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, pending_trajectories_),
  0,
  1,
  4,
  2,
  3,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::abb::egm::wrapper::trajectory::JointGoal)},
  { 11, 19, sizeof(::abb::egm::wrapper::trajectory::CartesianGoal)},
  { 22, 29, sizeof(::abb::egm::wrapper::trajectory::RobotGoal)},
  { 31, 37, sizeof(::abb::egm::wrapper::trajectory::ExternalGoal)},
  { 38, 47, sizeof(::abb::egm::wrapper::trajectory::PointGoal)},
  { 51, 58, sizeof(::abb::egm::wrapper::trajectory::RobotPositionGoal)},
  { 60, 67, sizeof(::abb::egm::wrapper::trajectory::RobotVelocityGoal)},
  { 69, 75, sizeof(::abb::egm::wrapper::trajectory::TrajectoryGoal)},
  { 76, 83, sizeof(::abb::egm::wrapper::trajectory::StaticPositionGoal)},
  { 85, 92, sizeof(::abb::egm::wrapper::trajectory::StaticVelocityGoal)},
  { 94, 105, sizeof(::abb::egm::wrapper::trajectory::ExecutionProgress)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::egm::wrapper::trajectory::_JointGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::egm::wrapper::trajectory::_CartesianGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::egm::wrapper::trajectory::_RobotGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::egm::wrapper::trajectory::_ExternalGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::egm::wrapper::trajectory::_PointGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::egm::wrapper::trajectory::_RobotPositionGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::egm::wrapper::trajectory::_RobotVelocityGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::egm::wrapper::trajectory::_TrajectoryGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::egm::wrapper::trajectory::_StaticPositionGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::egm::wrapper::trajectory::_StaticVelocityGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::egm::wrapper::trajectory::_ExecutionProgress_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto = {
  {}, AddDescriptors_egm_5fwrapper_5ftrajectory_2eproto, "egm_wrapper_trajectory.proto", schemas,
  file_default_instances, TableStruct_egm_5fwrapper_5ftrajectory_2eproto::offsets,
  file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto, 11, file_level_enum_descriptors_egm_5fwrapper_5ftrajectory_2eproto, file_level_service_descriptors_egm_5fwrapper_5ftrajectory_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_egm_5fwrapper_5ftrajectory_2eproto = {
  false, InitDefaults_egm_5fwrapper_5ftrajectory_2eproto, 
  "\n\034egm_wrapper_trajectory.proto\022\032abb.egm."
  "wrapper.trajectory\032\021egm_wrapper.proto\"\220\001"
  "\n\tJointGoal\022)\n\010position\030\001 \001(\0132\027.abb.egm."
  "wrapper.Joints\022)\n\010velocity\030\002 \001(\0132\027.abb.e"
  "gm.wrapper.Joints\022-\n\014acceleration\030\003 \001(\0132"
  "\027.abb.egm.wrapper.Joints\"\235\001\n\rCartesianGo"
  "al\022,\n\004pose\030\001 \001(\0132\036.abb.egm.wrapper.Carte"
  "sianPose\022,\n\010velocity\030\002 \001(\0132\032.abb.egm.wra"
  "pper.Cartesian\0220\n\014acceleration\030\003 \001(\0132\032.a"
  "bb.egm.wrapper.Cartesian\"\200\001\n\tRobotGoal\0225"
  "\n\006joints\030\001 \001(\0132%.abb.egm.wrapper.traject"
  "ory.JointGoal\022<\n\tcartesian\030\002 \001(\0132).abb.e"
  "gm.wrapper.trajectory.CartesianGoal\"E\n\014E"
  "xternalGoal\0225\n\006joints\030\001 \001(\0132%.abb.egm.wr"
  "apper.trajectory.JointGoal\"\236\001\n\tPointGoal"
  "\022\020\n\010duration\030\001 \001(\001\0224\n\005robot\030\002 \001(\0132%.abb."
  "egm.wrapper.trajectory.RobotGoal\022:\n\010exte"
  "rnal\030\003 \001(\0132(.abb.egm.wrapper.trajectory."
  "ExternalGoal\022\r\n\005reach\030\004 \001(\010\"o\n\021RobotPosi"
  "tionGoal\022\'\n\006joints\030\001 \001(\0132\027.abb.egm.wrapp"
  "er.Joints\0221\n\tcartesian\030\002 \001(\0132\036.abb.egm.w"
  "rapper.CartesianPose\"s\n\021RobotVelocityGoa"
  "l\022\'\n\006joints\030\001 \001(\0132\027.abb.egm.wrapper.Join"
  "ts\0225\n\tcartesian\030\002 \001(\0132\".abb.egm.wrapper."
  "CartesianVelocity\"G\n\016TrajectoryGoal\0225\n\006p"
  "oints\030\001 \003(\0132%.abb.egm.wrapper.trajectory"
  ".PointGoal\"}\n\022StaticPositionGoal\022<\n\005robo"
  "t\030\001 \001(\0132-.abb.egm.wrapper.trajectory.Rob"
  "otPositionGoal\022)\n\010external\030\002 \001(\0132\027.abb.e"
  "gm.wrapper.Joints\"}\n\022StaticVelocityGoal\022"
  "<\n\005robot\030\001 \001(\0132-.abb.egm.wrapper.traject"
  "ory.RobotVelocityGoal\022)\n\010external\030\002 \001(\0132"
  "\027.abb.egm.wrapper.Joints\"\224\002\n\021ExecutionPr"
  "ogress\022&\n\006inputs\030\001 \001(\0132\026.abb.egm.wrapper"
  ".Input\022(\n\007outputs\030\002 \001(\0132\027.abb.egm.wrappe"
  "r.Output\022\023\n\013time_passed\030\003 \001(\001\0223\n\004goal\030\004 "
  "\001(\0132%.abb.egm.wrapper.trajectory.PointGo"
  "al\022E\n\021active_trajectory\030\005 \001(\0132*.abb.egm."
  "wrapper.trajectory.TrajectoryGoal\022\034\n\024pen"
  "ding_trajectories\030\006 \001(\r"
,
  "egm_wrapper_trajectory.proto", &assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto, 1583,
};

void AddDescriptors_egm_5fwrapper_5ftrajectory_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_egm_5fwrapper_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_egm_5fwrapper_5ftrajectory_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_egm_5fwrapper_5ftrajectory_2eproto = []() { AddDescriptors_egm_5fwrapper_5ftrajectory_2eproto(); return true; }();
namespace abb {
namespace egm {
namespace wrapper {
namespace trajectory {

// ===================================================================

void JointGoal::InitAsDefaultInstance() {
  ::abb::egm::wrapper::trajectory::_JointGoal_default_instance_._instance.get_mutable()->position_ = const_cast< ::abb::egm::wrapper::Joints*>(
      ::abb::egm::wrapper::Joints::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_JointGoal_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::abb::egm::wrapper::Joints*>(
      ::abb::egm::wrapper::Joints::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_JointGoal_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::abb::egm::wrapper::Joints*>(
      ::abb::egm::wrapper::Joints::internal_default_instance());
}
class JointGoal::HasBitSetters {
 public:
  static const ::abb::egm::wrapper::Joints& position(const JointGoal* msg);
  static void set_has_position(JointGoal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::abb::egm::wrapper::Joints& velocity(const JointGoal* msg);
  static void set_has_velocity(JointGoal* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::abb::egm::wrapper::Joints& acceleration(const JointGoal* msg);
  static void set_has_acceleration(JointGoal* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::abb::egm::wrapper::Joints&
JointGoal::HasBitSetters::position(const JointGoal* msg) {
  return *msg->position_;
}
const ::abb::egm::wrapper::Joints&
JointGoal::HasBitSetters::velocity(const JointGoal* msg) {
  return *msg->velocity_;
}
const ::abb::egm::wrapper::Joints&
JointGoal::HasBitSetters::acceleration(const JointGoal* msg) {
  return *msg->acceleration_;
}
void JointGoal::clear_position() {
  if (position_ != NULL) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void JointGoal::clear_velocity() {
  if (velocity_ != NULL) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void JointGoal::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointGoal::kPositionFieldNumber;
const int JointGoal::kVelocityFieldNumber;
const int JointGoal::kAccelerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointGoal::JointGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.wrapper.trajectory.JointGoal)
}
JointGoal::JointGoal(const JointGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::abb::egm::wrapper::Joints(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::abb::egm::wrapper::Joints(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::abb::egm::wrapper::Joints(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.JointGoal)
}

void JointGoal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_JointGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceleration_) -
      reinterpret_cast<char*>(&position_)) + sizeof(acceleration_));
}

JointGoal::~JointGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.JointGoal)
  SharedDtor();
}

void JointGoal::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
}

void JointGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointGoal& JointGoal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JointGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void JointGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.JointGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != NULL);
      acceleration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JointGoal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JointGoal*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.Joints position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::Joints::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .abb.egm.wrapper.Joints velocity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::Joints::_InternalParse;
        object = msg->mutable_velocity();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .abb.egm.wrapper.Joints acceleration = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::Joints::_InternalParse;
        object = msg->mutable_acceleration();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JointGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.wrapper.trajectory.JointGoal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.wrapper.Joints position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.Joints velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.Joints acceleration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.wrapper.trajectory.JointGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.wrapper.trajectory.JointGoal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JointGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.wrapper.trajectory.JointGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.Joints position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  // optional .abb.egm.wrapper.Joints velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::velocity(this), output);
  }

  // optional .abb.egm.wrapper.Joints acceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::acceleration(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.wrapper.trajectory.JointGoal)
}

::google::protobuf::uint8* JointGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.JointGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.Joints position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), deterministic, target);
  }

  // optional .abb.egm.wrapper.Joints velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::velocity(this), deterministic, target);
  }

  // optional .abb.egm.wrapper.Joints acceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::acceleration(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.JointGoal)
  return target;
}

size_t JointGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.JointGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.egm.wrapper.Joints position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .abb.egm.wrapper.Joints velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .abb.egm.wrapper.Joints acceleration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.wrapper.trajectory.JointGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const JointGoal* source =
      ::google::protobuf::DynamicCastToGenerated<JointGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.wrapper.trajectory.JointGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.wrapper.trajectory.JointGoal)
    MergeFrom(*source);
  }
}

void JointGoal::MergeFrom(const JointGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.JointGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::abb::egm::wrapper::Joints::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::abb::egm::wrapper::Joints::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_acceleration()->::abb::egm::wrapper::Joints::MergeFrom(from.acceleration());
    }
  }
}

void JointGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.wrapper.trajectory.JointGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointGoal::CopyFrom(const JointGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.JointGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointGoal::IsInitialized() const {
  return true;
}

void JointGoal::Swap(JointGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointGoal::InternalSwap(JointGoal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
}

::google::protobuf::Metadata JointGoal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto);
  return ::file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CartesianGoal::InitAsDefaultInstance() {
  ::abb::egm::wrapper::trajectory::_CartesianGoal_default_instance_._instance.get_mutable()->pose_ = const_cast< ::abb::egm::wrapper::CartesianPose*>(
      ::abb::egm::wrapper::CartesianPose::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_CartesianGoal_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::abb::egm::wrapper::Cartesian*>(
      ::abb::egm::wrapper::Cartesian::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_CartesianGoal_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::abb::egm::wrapper::Cartesian*>(
      ::abb::egm::wrapper::Cartesian::internal_default_instance());
}
class CartesianGoal::HasBitSetters {
 public:
  static const ::abb::egm::wrapper::CartesianPose& pose(const CartesianGoal* msg);
  static void set_has_pose(CartesianGoal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::abb::egm::wrapper::Cartesian& velocity(const CartesianGoal* msg);
  static void set_has_velocity(CartesianGoal* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::abb::egm::wrapper::Cartesian& acceleration(const CartesianGoal* msg);
  static void set_has_acceleration(CartesianGoal* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::abb::egm::wrapper::CartesianPose&
CartesianGoal::HasBitSetters::pose(const CartesianGoal* msg) {
  return *msg->pose_;
}
const ::abb::egm::wrapper::Cartesian&
CartesianGoal::HasBitSetters::velocity(const CartesianGoal* msg) {
  return *msg->velocity_;
}
const ::abb::egm::wrapper::Cartesian&
CartesianGoal::HasBitSetters::acceleration(const CartesianGoal* msg) {
  return *msg->acceleration_;
}
void CartesianGoal::clear_pose() {
  if (pose_ != NULL) pose_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CartesianGoal::clear_velocity() {
  if (velocity_ != NULL) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CartesianGoal::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CartesianGoal::kPoseFieldNumber;
const int CartesianGoal::kVelocityFieldNumber;
const int CartesianGoal::kAccelerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CartesianGoal::CartesianGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.wrapper.trajectory.CartesianGoal)
}
CartesianGoal::CartesianGoal(const CartesianGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::abb::egm::wrapper::CartesianPose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::abb::egm::wrapper::Cartesian(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::abb::egm::wrapper::Cartesian(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.CartesianGoal)
}

void CartesianGoal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CartesianGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceleration_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(acceleration_));
}

CartesianGoal::~CartesianGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.CartesianGoal)
  SharedDtor();
}

void CartesianGoal::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
}

void CartesianGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CartesianGoal& CartesianGoal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CartesianGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void CartesianGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.CartesianGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != NULL);
      acceleration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CartesianGoal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CartesianGoal*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.CartesianPose pose = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::CartesianPose::_InternalParse;
        object = msg->mutable_pose();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .abb.egm.wrapper.Cartesian velocity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::Cartesian::_InternalParse;
        object = msg->mutable_velocity();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .abb.egm.wrapper.Cartesian acceleration = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::Cartesian::_InternalParse;
        object = msg->mutable_acceleration();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CartesianGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.wrapper.trajectory.CartesianGoal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.wrapper.CartesianPose pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.Cartesian velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.Cartesian acceleration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.wrapper.trajectory.CartesianGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.wrapper.trajectory.CartesianGoal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CartesianGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.wrapper.trajectory.CartesianGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.CartesianPose pose = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pose(this), output);
  }

  // optional .abb.egm.wrapper.Cartesian velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::velocity(this), output);
  }

  // optional .abb.egm.wrapper.Cartesian acceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::acceleration(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.wrapper.trajectory.CartesianGoal)
}

::google::protobuf::uint8* CartesianGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.CartesianGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.CartesianPose pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pose(this), deterministic, target);
  }

  // optional .abb.egm.wrapper.Cartesian velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::velocity(this), deterministic, target);
  }

  // optional .abb.egm.wrapper.Cartesian acceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::acceleration(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.CartesianGoal)
  return target;
}

size_t CartesianGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.CartesianGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.egm.wrapper.CartesianPose pose = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional .abb.egm.wrapper.Cartesian velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .abb.egm.wrapper.Cartesian acceleration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.wrapper.trajectory.CartesianGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianGoal* source =
      ::google::protobuf::DynamicCastToGenerated<CartesianGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.wrapper.trajectory.CartesianGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.wrapper.trajectory.CartesianGoal)
    MergeFrom(*source);
  }
}

void CartesianGoal::MergeFrom(const CartesianGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.CartesianGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pose()->::abb::egm::wrapper::CartesianPose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::abb::egm::wrapper::Cartesian::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_acceleration()->::abb::egm::wrapper::Cartesian::MergeFrom(from.acceleration());
    }
  }
}

void CartesianGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.wrapper.trajectory.CartesianGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianGoal::CopyFrom(const CartesianGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.CartesianGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianGoal::IsInitialized() const {
  return true;
}

void CartesianGoal::Swap(CartesianGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CartesianGoal::InternalSwap(CartesianGoal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pose_, other->pose_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
}

::google::protobuf::Metadata CartesianGoal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto);
  return ::file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RobotGoal::InitAsDefaultInstance() {
  ::abb::egm::wrapper::trajectory::_RobotGoal_default_instance_._instance.get_mutable()->joints_ = const_cast< ::abb::egm::wrapper::trajectory::JointGoal*>(
      ::abb::egm::wrapper::trajectory::JointGoal::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_RobotGoal_default_instance_._instance.get_mutable()->cartesian_ = const_cast< ::abb::egm::wrapper::trajectory::CartesianGoal*>(
      ::abb::egm::wrapper::trajectory::CartesianGoal::internal_default_instance());
}
class RobotGoal::HasBitSetters {
 public:
  static const ::abb::egm::wrapper::trajectory::JointGoal& joints(const RobotGoal* msg);
  static void set_has_joints(RobotGoal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::abb::egm::wrapper::trajectory::CartesianGoal& cartesian(const RobotGoal* msg);
  static void set_has_cartesian(RobotGoal* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::abb::egm::wrapper::trajectory::JointGoal&
RobotGoal::HasBitSetters::joints(const RobotGoal* msg) {
  return *msg->joints_;
}
const ::abb::egm::wrapper::trajectory::CartesianGoal&
RobotGoal::HasBitSetters::cartesian(const RobotGoal* msg) {
  return *msg->cartesian_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotGoal::kJointsFieldNumber;
const int RobotGoal::kCartesianFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotGoal::RobotGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.wrapper.trajectory.RobotGoal)
}
RobotGoal::RobotGoal(const RobotGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_joints()) {
    joints_ = new ::abb::egm::wrapper::trajectory::JointGoal(*from.joints_);
  } else {
    joints_ = NULL;
  }
  if (from.has_cartesian()) {
    cartesian_ = new ::abb::egm::wrapper::trajectory::CartesianGoal(*from.cartesian_);
  } else {
    cartesian_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.RobotGoal)
}

void RobotGoal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RobotGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::memset(&joints_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cartesian_) -
      reinterpret_cast<char*>(&joints_)) + sizeof(cartesian_));
}

RobotGoal::~RobotGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.RobotGoal)
  SharedDtor();
}

void RobotGoal::SharedDtor() {
  if (this != internal_default_instance()) delete joints_;
  if (this != internal_default_instance()) delete cartesian_;
}

void RobotGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotGoal& RobotGoal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RobotGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void RobotGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.RobotGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(joints_ != NULL);
      joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cartesian_ != NULL);
      cartesian_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RobotGoal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RobotGoal*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::trajectory::JointGoal::_InternalParse;
        object = msg->mutable_joints();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::trajectory::CartesianGoal::_InternalParse;
        object = msg->mutable_cartesian();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RobotGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.wrapper.trajectory.RobotGoal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cartesian()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.wrapper.trajectory.RobotGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.wrapper.trajectory.RobotGoal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RobotGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.wrapper.trajectory.RobotGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::joints(this), output);
  }

  // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cartesian(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.wrapper.trajectory.RobotGoal)
}

::google::protobuf::uint8* RobotGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.RobotGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::joints(this), deterministic, target);
  }

  // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cartesian(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.RobotGoal)
  return target;
}

size_t RobotGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.RobotGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *joints_);
    }

    // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cartesian_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.wrapper.trajectory.RobotGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotGoal* source =
      ::google::protobuf::DynamicCastToGenerated<RobotGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.wrapper.trajectory.RobotGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.wrapper.trajectory.RobotGoal)
    MergeFrom(*source);
  }
}

void RobotGoal::MergeFrom(const RobotGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.RobotGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_joints()->::abb::egm::wrapper::trajectory::JointGoal::MergeFrom(from.joints());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cartesian()->::abb::egm::wrapper::trajectory::CartesianGoal::MergeFrom(from.cartesian());
    }
  }
}

void RobotGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.wrapper.trajectory.RobotGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotGoal::CopyFrom(const RobotGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.RobotGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotGoal::IsInitialized() const {
  return true;
}

void RobotGoal::Swap(RobotGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotGoal::InternalSwap(RobotGoal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(joints_, other->joints_);
  swap(cartesian_, other->cartesian_);
}

::google::protobuf::Metadata RobotGoal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto);
  return ::file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExternalGoal::InitAsDefaultInstance() {
  ::abb::egm::wrapper::trajectory::_ExternalGoal_default_instance_._instance.get_mutable()->joints_ = const_cast< ::abb::egm::wrapper::trajectory::JointGoal*>(
      ::abb::egm::wrapper::trajectory::JointGoal::internal_default_instance());
}
class ExternalGoal::HasBitSetters {
 public:
  static const ::abb::egm::wrapper::trajectory::JointGoal& joints(const ExternalGoal* msg);
  static void set_has_joints(ExternalGoal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::abb::egm::wrapper::trajectory::JointGoal&
ExternalGoal::HasBitSetters::joints(const ExternalGoal* msg) {
  return *msg->joints_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalGoal::kJointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalGoal::ExternalGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.wrapper.trajectory.ExternalGoal)
}
ExternalGoal::ExternalGoal(const ExternalGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_joints()) {
    joints_ = new ::abb::egm::wrapper::trajectory::JointGoal(*from.joints_);
  } else {
    joints_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.ExternalGoal)
}

void ExternalGoal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExternalGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  joints_ = NULL;
}

ExternalGoal::~ExternalGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.ExternalGoal)
  SharedDtor();
}

void ExternalGoal::SharedDtor() {
  if (this != internal_default_instance()) delete joints_;
}

void ExternalGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalGoal& ExternalGoal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExternalGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void ExternalGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.ExternalGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(joints_ != NULL);
    joints_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExternalGoal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExternalGoal*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::trajectory::JointGoal::_InternalParse;
        object = msg->mutable_joints();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExternalGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.wrapper.trajectory.ExternalGoal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.wrapper.trajectory.ExternalGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.wrapper.trajectory.ExternalGoal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExternalGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.wrapper.trajectory.ExternalGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::joints(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.wrapper.trajectory.ExternalGoal)
}

::google::protobuf::uint8* ExternalGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.ExternalGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::joints(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.ExternalGoal)
  return target;
}

size_t ExternalGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.ExternalGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *joints_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.wrapper.trajectory.ExternalGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternalGoal* source =
      ::google::protobuf::DynamicCastToGenerated<ExternalGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.wrapper.trajectory.ExternalGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.wrapper.trajectory.ExternalGoal)
    MergeFrom(*source);
  }
}

void ExternalGoal::MergeFrom(const ExternalGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.ExternalGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_joints()) {
    mutable_joints()->::abb::egm::wrapper::trajectory::JointGoal::MergeFrom(from.joints());
  }
}

void ExternalGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.wrapper.trajectory.ExternalGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalGoal::CopyFrom(const ExternalGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.ExternalGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalGoal::IsInitialized() const {
  return true;
}

void ExternalGoal::Swap(ExternalGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalGoal::InternalSwap(ExternalGoal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(joints_, other->joints_);
}

::google::protobuf::Metadata ExternalGoal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto);
  return ::file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PointGoal::InitAsDefaultInstance() {
  ::abb::egm::wrapper::trajectory::_PointGoal_default_instance_._instance.get_mutable()->robot_ = const_cast< ::abb::egm::wrapper::trajectory::RobotGoal*>(
      ::abb::egm::wrapper::trajectory::RobotGoal::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_PointGoal_default_instance_._instance.get_mutable()->external_ = const_cast< ::abb::egm::wrapper::trajectory::ExternalGoal*>(
      ::abb::egm::wrapper::trajectory::ExternalGoal::internal_default_instance());
}
class PointGoal::HasBitSetters {
 public:
  static void set_has_duration(PointGoal* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::abb::egm::wrapper::trajectory::RobotGoal& robot(const PointGoal* msg);
  static void set_has_robot(PointGoal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::abb::egm::wrapper::trajectory::ExternalGoal& external(const PointGoal* msg);
  static void set_has_external(PointGoal* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_reach(PointGoal* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::abb::egm::wrapper::trajectory::RobotGoal&
PointGoal::HasBitSetters::robot(const PointGoal* msg) {
  return *msg->robot_;
}
const ::abb::egm::wrapper::trajectory::ExternalGoal&
PointGoal::HasBitSetters::external(const PointGoal* msg) {
  return *msg->external_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointGoal::kDurationFieldNumber;
const int PointGoal::kRobotFieldNumber;
const int PointGoal::kExternalFieldNumber;
const int PointGoal::kReachFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointGoal::PointGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.wrapper.trajectory.PointGoal)
}
PointGoal::PointGoal(const PointGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_robot()) {
    robot_ = new ::abb::egm::wrapper::trajectory::RobotGoal(*from.robot_);
  } else {
    robot_ = NULL;
  }
  if (from.has_external()) {
    external_ = new ::abb::egm::wrapper::trajectory::ExternalGoal(*from.external_);
  } else {
    external_ = NULL;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&reach_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(reach_));
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.PointGoal)
}

void PointGoal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PointGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::memset(&robot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reach_) -
      reinterpret_cast<char*>(&robot_)) + sizeof(reach_));
}

PointGoal::~PointGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.PointGoal)
  SharedDtor();
}

void PointGoal::SharedDtor() {
  if (this != internal_default_instance()) delete robot_;
  if (this != internal_default_instance()) delete external_;
}

void PointGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointGoal& PointGoal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PointGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void PointGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.PointGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(robot_ != NULL);
      robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(external_ != NULL);
      external_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reach_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(reach_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PointGoal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PointGoal*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double duration = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_duration(val);
        break;
      }
      // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::trajectory::RobotGoal::_InternalParse;
        object = msg->mutable_robot();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::trajectory::ExternalGoal::_InternalParse;
        object = msg->mutable_external();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional bool reach = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_reach(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PointGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.wrapper.trajectory.PointGoal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_external()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reach = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_reach(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.wrapper.trajectory.PointGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.wrapper.trajectory.PointGoal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PointGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.wrapper.trajectory.PointGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double duration = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->duration(), output);
  }

  // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::robot(this), output);
  }

  // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::external(this), output);
  }

  // optional bool reach = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.wrapper.trajectory.PointGoal)
}

::google::protobuf::uint8* PointGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.PointGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double duration = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->duration(), target);
  }

  // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::robot(this), deterministic, target);
  }

  // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::external(this), deterministic, target);
  }

  // optional bool reach = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.PointGoal)
  return target;
}

size_t PointGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.PointGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *robot_);
    }

    // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *external_);
    }

    // optional double duration = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool reach = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.wrapper.trajectory.PointGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const PointGoal* source =
      ::google::protobuf::DynamicCastToGenerated<PointGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.wrapper.trajectory.PointGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.wrapper.trajectory.PointGoal)
    MergeFrom(*source);
  }
}

void PointGoal::MergeFrom(const PointGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.PointGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_robot()->::abb::egm::wrapper::trajectory::RobotGoal::MergeFrom(from.robot());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_external()->::abb::egm::wrapper::trajectory::ExternalGoal::MergeFrom(from.external());
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      reach_ = from.reach_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PointGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.wrapper.trajectory.PointGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointGoal::CopyFrom(const PointGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.PointGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointGoal::IsInitialized() const {
  return true;
}

void PointGoal::Swap(PointGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointGoal::InternalSwap(PointGoal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(robot_, other->robot_);
  swap(external_, other->external_);
  swap(duration_, other->duration_);
  swap(reach_, other->reach_);
}

::google::protobuf::Metadata PointGoal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto);
  return ::file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RobotPositionGoal::InitAsDefaultInstance() {
  ::abb::egm::wrapper::trajectory::_RobotPositionGoal_default_instance_._instance.get_mutable()->joints_ = const_cast< ::abb::egm::wrapper::Joints*>(
      ::abb::egm::wrapper::Joints::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_RobotPositionGoal_default_instance_._instance.get_mutable()->cartesian_ = const_cast< ::abb::egm::wrapper::CartesianPose*>(
      ::abb::egm::wrapper::CartesianPose::internal_default_instance());
}
class RobotPositionGoal::HasBitSetters {
 public:
  static const ::abb::egm::wrapper::Joints& joints(const RobotPositionGoal* msg);
  static void set_has_joints(RobotPositionGoal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::abb::egm::wrapper::CartesianPose& cartesian(const RobotPositionGoal* msg);
  static void set_has_cartesian(RobotPositionGoal* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::abb::egm::wrapper::Joints&
RobotPositionGoal::HasBitSetters::joints(const RobotPositionGoal* msg) {
  return *msg->joints_;
}
const ::abb::egm::wrapper::CartesianPose&
RobotPositionGoal::HasBitSetters::cartesian(const RobotPositionGoal* msg) {
  return *msg->cartesian_;
}
void RobotPositionGoal::clear_joints() {
  if (joints_ != NULL) joints_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RobotPositionGoal::clear_cartesian() {
  if (cartesian_ != NULL) cartesian_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotPositionGoal::kJointsFieldNumber;
const int RobotPositionGoal::kCartesianFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotPositionGoal::RobotPositionGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.wrapper.trajectory.RobotPositionGoal)
}
RobotPositionGoal::RobotPositionGoal(const RobotPositionGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_joints()) {
    joints_ = new ::abb::egm::wrapper::Joints(*from.joints_);
  } else {
    joints_ = NULL;
  }
  if (from.has_cartesian()) {
    cartesian_ = new ::abb::egm::wrapper::CartesianPose(*from.cartesian_);
  } else {
    cartesian_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.RobotPositionGoal)
}

void RobotPositionGoal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RobotPositionGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::memset(&joints_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cartesian_) -
      reinterpret_cast<char*>(&joints_)) + sizeof(cartesian_));
}

RobotPositionGoal::~RobotPositionGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.RobotPositionGoal)
  SharedDtor();
}

void RobotPositionGoal::SharedDtor() {
  if (this != internal_default_instance()) delete joints_;
  if (this != internal_default_instance()) delete cartesian_;
}

void RobotPositionGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotPositionGoal& RobotPositionGoal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RobotPositionGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void RobotPositionGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(joints_ != NULL);
      joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cartesian_ != NULL);
      cartesian_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RobotPositionGoal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RobotPositionGoal*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.Joints joints = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::Joints::_InternalParse;
        object = msg->mutable_joints();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::CartesianPose::_InternalParse;
        object = msg->mutable_cartesian();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RobotPositionGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.wrapper.Joints joints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cartesian()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.wrapper.trajectory.RobotPositionGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.wrapper.trajectory.RobotPositionGoal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RobotPositionGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.Joints joints = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::joints(this), output);
  }

  // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cartesian(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.wrapper.trajectory.RobotPositionGoal)
}

::google::protobuf::uint8* RobotPositionGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.Joints joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::joints(this), deterministic, target);
  }

  // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cartesian(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.RobotPositionGoal)
  return target;
}

size_t RobotPositionGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.Joints joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *joints_);
    }

    // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cartesian_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotPositionGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotPositionGoal* source =
      ::google::protobuf::DynamicCastToGenerated<RobotPositionGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.wrapper.trajectory.RobotPositionGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.wrapper.trajectory.RobotPositionGoal)
    MergeFrom(*source);
  }
}

void RobotPositionGoal::MergeFrom(const RobotPositionGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_joints()->::abb::egm::wrapper::Joints::MergeFrom(from.joints());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cartesian()->::abb::egm::wrapper::CartesianPose::MergeFrom(from.cartesian());
    }
  }
}

void RobotPositionGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotPositionGoal::CopyFrom(const RobotPositionGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotPositionGoal::IsInitialized() const {
  return true;
}

void RobotPositionGoal::Swap(RobotPositionGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotPositionGoal::InternalSwap(RobotPositionGoal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(joints_, other->joints_);
  swap(cartesian_, other->cartesian_);
}

::google::protobuf::Metadata RobotPositionGoal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto);
  return ::file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RobotVelocityGoal::InitAsDefaultInstance() {
  ::abb::egm::wrapper::trajectory::_RobotVelocityGoal_default_instance_._instance.get_mutable()->joints_ = const_cast< ::abb::egm::wrapper::Joints*>(
      ::abb::egm::wrapper::Joints::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_RobotVelocityGoal_default_instance_._instance.get_mutable()->cartesian_ = const_cast< ::abb::egm::wrapper::CartesianVelocity*>(
      ::abb::egm::wrapper::CartesianVelocity::internal_default_instance());
}
class RobotVelocityGoal::HasBitSetters {
 public:
  static const ::abb::egm::wrapper::Joints& joints(const RobotVelocityGoal* msg);
  static void set_has_joints(RobotVelocityGoal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::abb::egm::wrapper::CartesianVelocity& cartesian(const RobotVelocityGoal* msg);
  static void set_has_cartesian(RobotVelocityGoal* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::abb::egm::wrapper::Joints&
RobotVelocityGoal::HasBitSetters::joints(const RobotVelocityGoal* msg) {
  return *msg->joints_;
}
const ::abb::egm::wrapper::CartesianVelocity&
RobotVelocityGoal::HasBitSetters::cartesian(const RobotVelocityGoal* msg) {
  return *msg->cartesian_;
}
void RobotVelocityGoal::clear_joints() {
  if (joints_ != NULL) joints_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RobotVelocityGoal::clear_cartesian() {
  if (cartesian_ != NULL) cartesian_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotVelocityGoal::kJointsFieldNumber;
const int RobotVelocityGoal::kCartesianFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotVelocityGoal::RobotVelocityGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.wrapper.trajectory.RobotVelocityGoal)
}
RobotVelocityGoal::RobotVelocityGoal(const RobotVelocityGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_joints()) {
    joints_ = new ::abb::egm::wrapper::Joints(*from.joints_);
  } else {
    joints_ = NULL;
  }
  if (from.has_cartesian()) {
    cartesian_ = new ::abb::egm::wrapper::CartesianVelocity(*from.cartesian_);
  } else {
    cartesian_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.RobotVelocityGoal)
}

void RobotVelocityGoal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RobotVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::memset(&joints_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cartesian_) -
      reinterpret_cast<char*>(&joints_)) + sizeof(cartesian_));
}

RobotVelocityGoal::~RobotVelocityGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  SharedDtor();
}

void RobotVelocityGoal::SharedDtor() {
  if (this != internal_default_instance()) delete joints_;
  if (this != internal_default_instance()) delete cartesian_;
}

void RobotVelocityGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotVelocityGoal& RobotVelocityGoal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RobotVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void RobotVelocityGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(joints_ != NULL);
      joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cartesian_ != NULL);
      cartesian_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RobotVelocityGoal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RobotVelocityGoal*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.Joints joints = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::Joints::_InternalParse;
        object = msg->mutable_joints();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::CartesianVelocity::_InternalParse;
        object = msg->mutable_cartesian();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RobotVelocityGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.wrapper.Joints joints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cartesian()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RobotVelocityGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.Joints joints = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::joints(this), output);
  }

  // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cartesian(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.wrapper.trajectory.RobotVelocityGoal)
}

::google::protobuf::uint8* RobotVelocityGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.Joints joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::joints(this), deterministic, target);
  }

  // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cartesian(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  return target;
}

size_t RobotVelocityGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.Joints joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *joints_);
    }

    // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cartesian_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotVelocityGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotVelocityGoal* source =
      ::google::protobuf::DynamicCastToGenerated<RobotVelocityGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.wrapper.trajectory.RobotVelocityGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.wrapper.trajectory.RobotVelocityGoal)
    MergeFrom(*source);
  }
}

void RobotVelocityGoal::MergeFrom(const RobotVelocityGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_joints()->::abb::egm::wrapper::Joints::MergeFrom(from.joints());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cartesian()->::abb::egm::wrapper::CartesianVelocity::MergeFrom(from.cartesian());
    }
  }
}

void RobotVelocityGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotVelocityGoal::CopyFrom(const RobotVelocityGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotVelocityGoal::IsInitialized() const {
  return true;
}

void RobotVelocityGoal::Swap(RobotVelocityGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotVelocityGoal::InternalSwap(RobotVelocityGoal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(joints_, other->joints_);
  swap(cartesian_, other->cartesian_);
}

::google::protobuf::Metadata RobotVelocityGoal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto);
  return ::file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryGoal::InitAsDefaultInstance() {
}
class TrajectoryGoal::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryGoal::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryGoal::TrajectoryGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.wrapper.trajectory.TrajectoryGoal)
}
TrajectoryGoal::TrajectoryGoal(const TrajectoryGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.TrajectoryGoal)
}

void TrajectoryGoal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TrajectoryGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
}

TrajectoryGoal::~TrajectoryGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.TrajectoryGoal)
  SharedDtor();
}

void TrajectoryGoal::SharedDtor() {
}

void TrajectoryGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryGoal& TrajectoryGoal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TrajectoryGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrajectoryGoal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TrajectoryGoal*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::abb::egm::wrapper::trajectory::PointGoal::_InternalParse;
          object = msg->add_points();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrajectoryGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.wrapper.trajectory.TrajectoryGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.wrapper.trajectory.TrajectoryGoal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrajectoryGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->points(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.wrapper.trajectory.TrajectoryGoal)
}

::google::protobuf::uint8* TrajectoryGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.TrajectoryGoal)
  return target;
}

size_t TrajectoryGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryGoal* source =
      ::google::protobuf::DynamicCastToGenerated<TrajectoryGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.wrapper.trajectory.TrajectoryGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.wrapper.trajectory.TrajectoryGoal)
    MergeFrom(*source);
  }
}

void TrajectoryGoal::MergeFrom(const TrajectoryGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void TrajectoryGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryGoal::CopyFrom(const TrajectoryGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryGoal::IsInitialized() const {
  return true;
}

void TrajectoryGoal::Swap(TrajectoryGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryGoal::InternalSwap(TrajectoryGoal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
}

::google::protobuf::Metadata TrajectoryGoal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto);
  return ::file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StaticPositionGoal::InitAsDefaultInstance() {
  ::abb::egm::wrapper::trajectory::_StaticPositionGoal_default_instance_._instance.get_mutable()->robot_ = const_cast< ::abb::egm::wrapper::trajectory::RobotPositionGoal*>(
      ::abb::egm::wrapper::trajectory::RobotPositionGoal::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_StaticPositionGoal_default_instance_._instance.get_mutable()->external_ = const_cast< ::abb::egm::wrapper::Joints*>(
      ::abb::egm::wrapper::Joints::internal_default_instance());
}
class StaticPositionGoal::HasBitSetters {
 public:
  static const ::abb::egm::wrapper::trajectory::RobotPositionGoal& robot(const StaticPositionGoal* msg);
  static void set_has_robot(StaticPositionGoal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::abb::egm::wrapper::Joints& external(const StaticPositionGoal* msg);
  static void set_has_external(StaticPositionGoal* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::abb::egm::wrapper::trajectory::RobotPositionGoal&
StaticPositionGoal::HasBitSetters::robot(const StaticPositionGoal* msg) {
  return *msg->robot_;
}
const ::abb::egm::wrapper::Joints&
StaticPositionGoal::HasBitSetters::external(const StaticPositionGoal* msg) {
  return *msg->external_;
}
void StaticPositionGoal::clear_external() {
  if (external_ != NULL) external_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticPositionGoal::kRobotFieldNumber;
const int StaticPositionGoal::kExternalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticPositionGoal::StaticPositionGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.wrapper.trajectory.StaticPositionGoal)
}
StaticPositionGoal::StaticPositionGoal(const StaticPositionGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_robot()) {
    robot_ = new ::abb::egm::wrapper::trajectory::RobotPositionGoal(*from.robot_);
  } else {
    robot_ = NULL;
  }
  if (from.has_external()) {
    external_ = new ::abb::egm::wrapper::Joints(*from.external_);
  } else {
    external_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.StaticPositionGoal)
}

void StaticPositionGoal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StaticPositionGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::memset(&robot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_) -
      reinterpret_cast<char*>(&robot_)) + sizeof(external_));
}

StaticPositionGoal::~StaticPositionGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.StaticPositionGoal)
  SharedDtor();
}

void StaticPositionGoal::SharedDtor() {
  if (this != internal_default_instance()) delete robot_;
  if (this != internal_default_instance()) delete external_;
}

void StaticPositionGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticPositionGoal& StaticPositionGoal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StaticPositionGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void StaticPositionGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(robot_ != NULL);
      robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(external_ != NULL);
      external_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StaticPositionGoal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StaticPositionGoal*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::trajectory::RobotPositionGoal::_InternalParse;
        object = msg->mutable_robot();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .abb.egm.wrapper.Joints external = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::Joints::_InternalParse;
        object = msg->mutable_external();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StaticPositionGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.Joints external = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_external()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.wrapper.trajectory.StaticPositionGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.wrapper.trajectory.StaticPositionGoal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StaticPositionGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::robot(this), output);
  }

  // optional .abb.egm.wrapper.Joints external = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::external(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.wrapper.trajectory.StaticPositionGoal)
}

::google::protobuf::uint8* StaticPositionGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::robot(this), deterministic, target);
  }

  // optional .abb.egm.wrapper.Joints external = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::external(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.StaticPositionGoal)
  return target;
}

size_t StaticPositionGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *robot_);
    }

    // optional .abb.egm.wrapper.Joints external = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *external_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticPositionGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticPositionGoal* source =
      ::google::protobuf::DynamicCastToGenerated<StaticPositionGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.wrapper.trajectory.StaticPositionGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.wrapper.trajectory.StaticPositionGoal)
    MergeFrom(*source);
  }
}

void StaticPositionGoal::MergeFrom(const StaticPositionGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_robot()->::abb::egm::wrapper::trajectory::RobotPositionGoal::MergeFrom(from.robot());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_external()->::abb::egm::wrapper::Joints::MergeFrom(from.external());
    }
  }
}

void StaticPositionGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticPositionGoal::CopyFrom(const StaticPositionGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticPositionGoal::IsInitialized() const {
  return true;
}

void StaticPositionGoal::Swap(StaticPositionGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticPositionGoal::InternalSwap(StaticPositionGoal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(robot_, other->robot_);
  swap(external_, other->external_);
}

::google::protobuf::Metadata StaticPositionGoal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto);
  return ::file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StaticVelocityGoal::InitAsDefaultInstance() {
  ::abb::egm::wrapper::trajectory::_StaticVelocityGoal_default_instance_._instance.get_mutable()->robot_ = const_cast< ::abb::egm::wrapper::trajectory::RobotVelocityGoal*>(
      ::abb::egm::wrapper::trajectory::RobotVelocityGoal::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_StaticVelocityGoal_default_instance_._instance.get_mutable()->external_ = const_cast< ::abb::egm::wrapper::Joints*>(
      ::abb::egm::wrapper::Joints::internal_default_instance());
}
class StaticVelocityGoal::HasBitSetters {
 public:
  static const ::abb::egm::wrapper::trajectory::RobotVelocityGoal& robot(const StaticVelocityGoal* msg);
  static void set_has_robot(StaticVelocityGoal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::abb::egm::wrapper::Joints& external(const StaticVelocityGoal* msg);
  static void set_has_external(StaticVelocityGoal* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::abb::egm::wrapper::trajectory::RobotVelocityGoal&
StaticVelocityGoal::HasBitSetters::robot(const StaticVelocityGoal* msg) {
  return *msg->robot_;
}
const ::abb::egm::wrapper::Joints&
StaticVelocityGoal::HasBitSetters::external(const StaticVelocityGoal* msg) {
  return *msg->external_;
}
void StaticVelocityGoal::clear_external() {
  if (external_ != NULL) external_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticVelocityGoal::kRobotFieldNumber;
const int StaticVelocityGoal::kExternalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticVelocityGoal::StaticVelocityGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.wrapper.trajectory.StaticVelocityGoal)
}
StaticVelocityGoal::StaticVelocityGoal(const StaticVelocityGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_robot()) {
    robot_ = new ::abb::egm::wrapper::trajectory::RobotVelocityGoal(*from.robot_);
  } else {
    robot_ = NULL;
  }
  if (from.has_external()) {
    external_ = new ::abb::egm::wrapper::Joints(*from.external_);
  } else {
    external_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.StaticVelocityGoal)
}

void StaticVelocityGoal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StaticVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::memset(&robot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_) -
      reinterpret_cast<char*>(&robot_)) + sizeof(external_));
}

StaticVelocityGoal::~StaticVelocityGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  SharedDtor();
}

void StaticVelocityGoal::SharedDtor() {
  if (this != internal_default_instance()) delete robot_;
  if (this != internal_default_instance()) delete external_;
}

void StaticVelocityGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticVelocityGoal& StaticVelocityGoal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StaticVelocityGoal_egm_5fwrapper_5ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void StaticVelocityGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(robot_ != NULL);
      robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(external_ != NULL);
      external_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StaticVelocityGoal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StaticVelocityGoal*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::trajectory::RobotVelocityGoal::_InternalParse;
        object = msg->mutable_robot();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .abb.egm.wrapper.Joints external = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::Joints::_InternalParse;
        object = msg->mutable_external();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StaticVelocityGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.Joints external = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_external()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StaticVelocityGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::robot(this), output);
  }

  // optional .abb.egm.wrapper.Joints external = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::external(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.wrapper.trajectory.StaticVelocityGoal)
}

::google::protobuf::uint8* StaticVelocityGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::robot(this), deterministic, target);
  }

  // optional .abb.egm.wrapper.Joints external = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::external(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  return target;
}

size_t StaticVelocityGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *robot_);
    }

    // optional .abb.egm.wrapper.Joints external = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *external_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticVelocityGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticVelocityGoal* source =
      ::google::protobuf::DynamicCastToGenerated<StaticVelocityGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.wrapper.trajectory.StaticVelocityGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.wrapper.trajectory.StaticVelocityGoal)
    MergeFrom(*source);
  }
}

void StaticVelocityGoal::MergeFrom(const StaticVelocityGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_robot()->::abb::egm::wrapper::trajectory::RobotVelocityGoal::MergeFrom(from.robot());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_external()->::abb::egm::wrapper::Joints::MergeFrom(from.external());
    }
  }
}

void StaticVelocityGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticVelocityGoal::CopyFrom(const StaticVelocityGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticVelocityGoal::IsInitialized() const {
  return true;
}

void StaticVelocityGoal::Swap(StaticVelocityGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticVelocityGoal::InternalSwap(StaticVelocityGoal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(robot_, other->robot_);
  swap(external_, other->external_);
}

::google::protobuf::Metadata StaticVelocityGoal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto);
  return ::file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionProgress::InitAsDefaultInstance() {
  ::abb::egm::wrapper::trajectory::_ExecutionProgress_default_instance_._instance.get_mutable()->inputs_ = const_cast< ::abb::egm::wrapper::Input*>(
      ::abb::egm::wrapper::Input::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_ExecutionProgress_default_instance_._instance.get_mutable()->outputs_ = const_cast< ::abb::egm::wrapper::Output*>(
      ::abb::egm::wrapper::Output::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_ExecutionProgress_default_instance_._instance.get_mutable()->goal_ = const_cast< ::abb::egm::wrapper::trajectory::PointGoal*>(
      ::abb::egm::wrapper::trajectory::PointGoal::internal_default_instance());
  ::abb::egm::wrapper::trajectory::_ExecutionProgress_default_instance_._instance.get_mutable()->active_trajectory_ = const_cast< ::abb::egm::wrapper::trajectory::TrajectoryGoal*>(
      ::abb::egm::wrapper::trajectory::TrajectoryGoal::internal_default_instance());
}
class ExecutionProgress::HasBitSetters {
 public:
  static const ::abb::egm::wrapper::Input& inputs(const ExecutionProgress* msg);
  static void set_has_inputs(ExecutionProgress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::abb::egm::wrapper::Output& outputs(const ExecutionProgress* msg);
  static void set_has_outputs(ExecutionProgress* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_passed(ExecutionProgress* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::abb::egm::wrapper::trajectory::PointGoal& goal(const ExecutionProgress* msg);
  static void set_has_goal(ExecutionProgress* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::abb::egm::wrapper::trajectory::TrajectoryGoal& active_trajectory(const ExecutionProgress* msg);
  static void set_has_active_trajectory(ExecutionProgress* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_pending_trajectories(ExecutionProgress* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::abb::egm::wrapper::Input&
ExecutionProgress::HasBitSetters::inputs(const ExecutionProgress* msg) {
  return *msg->inputs_;
}
const ::abb::egm::wrapper::Output&
ExecutionProgress::HasBitSetters::outputs(const ExecutionProgress* msg) {
  return *msg->outputs_;
}
const ::abb::egm::wrapper::trajectory::PointGoal&
ExecutionProgress::HasBitSetters::goal(const ExecutionProgress* msg) {
  return *msg->goal_;
}
const ::abb::egm::wrapper::trajectory::TrajectoryGoal&
ExecutionProgress::HasBitSetters::active_trajectory(const ExecutionProgress* msg) {
  return *msg->active_trajectory_;
}
void ExecutionProgress::clear_inputs() {
  if (inputs_ != NULL) inputs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ExecutionProgress::clear_outputs() {
  if (outputs_ != NULL) outputs_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionProgress::kInputsFieldNumber;
const int ExecutionProgress::kOutputsFieldNumber;
const int ExecutionProgress::kTimePassedFieldNumber;
const int ExecutionProgress::kGoalFieldNumber;
const int ExecutionProgress::kActiveTrajectoryFieldNumber;
const int ExecutionProgress::kPendingTrajectoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionProgress::ExecutionProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.wrapper.trajectory.ExecutionProgress)
}
ExecutionProgress::ExecutionProgress(const ExecutionProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inputs()) {
    inputs_ = new ::abb::egm::wrapper::Input(*from.inputs_);
  } else {
    inputs_ = NULL;
  }
  if (from.has_outputs()) {
    outputs_ = new ::abb::egm::wrapper::Output(*from.outputs_);
  } else {
    outputs_ = NULL;
  }
  if (from.has_goal()) {
    goal_ = new ::abb::egm::wrapper::trajectory::PointGoal(*from.goal_);
  } else {
    goal_ = NULL;
  }
  if (from.has_active_trajectory()) {
    active_trajectory_ = new ::abb::egm::wrapper::trajectory::TrajectoryGoal(*from.active_trajectory_);
  } else {
    active_trajectory_ = NULL;
  }
  ::memcpy(&time_passed_, &from.time_passed_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_trajectories_) -
    reinterpret_cast<char*>(&time_passed_)) + sizeof(pending_trajectories_));
  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.ExecutionProgress)
}

void ExecutionProgress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionProgress_egm_5fwrapper_5ftrajectory_2eproto.base);
  ::memset(&inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_trajectories_) -
      reinterpret_cast<char*>(&inputs_)) + sizeof(pending_trajectories_));
}

ExecutionProgress::~ExecutionProgress() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.ExecutionProgress)
  SharedDtor();
}

void ExecutionProgress::SharedDtor() {
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete outputs_;
  if (this != internal_default_instance()) delete goal_;
  if (this != internal_default_instance()) delete active_trajectory_;
}

void ExecutionProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionProgress& ExecutionProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionProgress_egm_5fwrapper_5ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void ExecutionProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(inputs_ != NULL);
      inputs_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(outputs_ != NULL);
      outputs_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(goal_ != NULL);
      goal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(active_trajectory_ != NULL);
      active_trajectory_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&time_passed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pending_trajectories_) -
        reinterpret_cast<char*>(&time_passed_)) + sizeof(pending_trajectories_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionProgress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionProgress*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .abb.egm.wrapper.Input inputs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::Input::_InternalParse;
        object = msg->mutable_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .abb.egm.wrapper.Output outputs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::Output::_InternalParse;
        object = msg->mutable_outputs();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional double time_passed = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_time_passed(val);
        break;
      }
      // optional .abb.egm.wrapper.trajectory.PointGoal goal = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::trajectory::PointGoal::_InternalParse;
        object = msg->mutable_goal();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::abb::egm::wrapper::trajectory::TrajectoryGoal::_InternalParse;
        object = msg->mutable_active_trajectory();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional uint32 pending_trajectories = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_pending_trajectories(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.wrapper.Input inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.Output outputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_passed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_time_passed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_passed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.trajectory.PointGoal goal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_goal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_active_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pending_trajectories = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_pending_trajectories(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pending_trajectories_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.wrapper.trajectory.ExecutionProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.wrapper.trajectory.ExecutionProgress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.Input inputs = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::inputs(this), output);
  }

  // optional .abb.egm.wrapper.Output outputs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::outputs(this), output);
  }

  // optional double time_passed = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time_passed(), output);
  }

  // optional .abb.egm.wrapper.trajectory.PointGoal goal = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::goal(this), output);
  }

  // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::active_trajectory(this), output);
  }

  // optional uint32 pending_trajectories = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pending_trajectories(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.wrapper.trajectory.ExecutionProgress)
}

::google::protobuf::uint8* ExecutionProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.egm.wrapper.Input inputs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::inputs(this), deterministic, target);
  }

  // optional .abb.egm.wrapper.Output outputs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::outputs(this), deterministic, target);
  }

  // optional double time_passed = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time_passed(), target);
  }

  // optional .abb.egm.wrapper.trajectory.PointGoal goal = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::goal(this), deterministic, target);
  }

  // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::active_trajectory(this), deterministic, target);
  }

  // optional uint32 pending_trajectories = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pending_trajectories(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.ExecutionProgress)
  return target;
}

size_t ExecutionProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .abb.egm.wrapper.Input inputs = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *inputs_);
    }

    // optional .abb.egm.wrapper.Output outputs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *outputs_);
    }

    // optional .abb.egm.wrapper.trajectory.PointGoal goal = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *goal_);
    }

    // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *active_trajectory_);
    }

    // optional double time_passed = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 pending_trajectories = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pending_trajectories());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionProgress* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.wrapper.trajectory.ExecutionProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.wrapper.trajectory.ExecutionProgress)
    MergeFrom(*source);
  }
}

void ExecutionProgress::MergeFrom(const ExecutionProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_inputs()->::abb::egm::wrapper::Input::MergeFrom(from.inputs());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_outputs()->::abb::egm::wrapper::Output::MergeFrom(from.outputs());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_goal()->::abb::egm::wrapper::trajectory::PointGoal::MergeFrom(from.goal());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_active_trajectory()->::abb::egm::wrapper::trajectory::TrajectoryGoal::MergeFrom(from.active_trajectory());
    }
    if (cached_has_bits & 0x00000010u) {
      time_passed_ = from.time_passed_;
    }
    if (cached_has_bits & 0x00000020u) {
      pending_trajectories_ = from.pending_trajectories_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExecutionProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionProgress::CopyFrom(const ExecutionProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionProgress::IsInitialized() const {
  return true;
}

void ExecutionProgress::Swap(ExecutionProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionProgress::InternalSwap(ExecutionProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(inputs_, other->inputs_);
  swap(outputs_, other->outputs_);
  swap(goal_, other->goal_);
  swap(active_trajectory_, other->active_trajectory_);
  swap(time_passed_, other->time_passed_);
  swap(pending_trajectories_, other->pending_trajectories_);
}

::google::protobuf::Metadata ExecutionProgress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_egm_5fwrapper_5ftrajectory_2eproto);
  return ::file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace trajectory
}  // namespace wrapper
}  // namespace egm
}  // namespace abb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::JointGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::JointGoal >(Arena* arena) {
  return Arena::CreateInternal< ::abb::egm::wrapper::trajectory::JointGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::CartesianGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::CartesianGoal >(Arena* arena) {
  return Arena::CreateInternal< ::abb::egm::wrapper::trajectory::CartesianGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::RobotGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::RobotGoal >(Arena* arena) {
  return Arena::CreateInternal< ::abb::egm::wrapper::trajectory::RobotGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::ExternalGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::ExternalGoal >(Arena* arena) {
  return Arena::CreateInternal< ::abb::egm::wrapper::trajectory::ExternalGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::PointGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::PointGoal >(Arena* arena) {
  return Arena::CreateInternal< ::abb::egm::wrapper::trajectory::PointGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::RobotPositionGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::RobotPositionGoal >(Arena* arena) {
  return Arena::CreateInternal< ::abb::egm::wrapper::trajectory::RobotPositionGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::RobotVelocityGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::RobotVelocityGoal >(Arena* arena) {
  return Arena::CreateInternal< ::abb::egm::wrapper::trajectory::RobotVelocityGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::TrajectoryGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::TrajectoryGoal >(Arena* arena) {
  return Arena::CreateInternal< ::abb::egm::wrapper::trajectory::TrajectoryGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::StaticPositionGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::StaticPositionGoal >(Arena* arena) {
  return Arena::CreateInternal< ::abb::egm::wrapper::trajectory::StaticPositionGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::StaticVelocityGoal* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::StaticVelocityGoal >(Arena* arena) {
  return Arena::CreateInternal< ::abb::egm::wrapper::trajectory::StaticVelocityGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::abb::egm::wrapper::trajectory::ExecutionProgress* Arena::CreateMaybeMessage< ::abb::egm::wrapper::trajectory::ExecutionProgress >(Arena* arena) {
  return Arena::CreateInternal< ::abb::egm::wrapper::trajectory::ExecutionProgress >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
